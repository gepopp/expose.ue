<?php


namespace App\pdf;


use App\File;
use App\RealEstate;
use Illuminate\Support\Facades\Storage;
use TCPDF;
use Image;


class BasePdf extends TCPDF
{

    protected $realEstate;
    protected $pageTitle = 'Uehlein Immobilien';
    protected $pageBreakImage;

    /**
     * @param mixed $pageBreakImage
     */
    public function setPageBreakImage( $pageBreakImage ): void
    {
        $this->pageBreakImage = $pageBreakImage;
    }

    /**
     * @param string $pageTitle
     */
    public function setPageTitle(string $pageTitle): void
    {
        $this->pageTitle = $pageTitle;
    }


    public function __construct(RealEstate $realEstate, $orientation = 'L', $unit = 'mm', $size = 'A4')
    {

        $this->realEstate = $realEstate;
        parent::__construct($orientation, $unit, $size);
        $this->addFont('Kartika', '', public_path('font/Kartika.php'));
        $this->SetFont('Kartika', '', 9, '', 'true');
        $this->SetTextColor(80, 80, 80);


    }

    public function Header()
    {
        /* Page Title */
        $this->Image(public_path('img/doties-small.png'), 0, 5, 10, 10);
        $this->SetFont('Kartika', null, 32);
        $this->setXY(0, 3);
        $this->SetTextColor(255, 255, 255);
        $this->SetFillColor(203, 153, 50);
        $this->Cell(12, 10, '', 0, 0, 'L', 1);
        $this->Cell(297/2-12, 10, $this->pageTitle, 0, 'L', 'L', 1);


        /* Real Estate Title on the right */
        $this->SetTextColor(80, 80, 80);
        $this->SetXY(297 / 2, 5);
        $this->SetFont('helvetica', null, 12);
        $this->Cell(297 / 2 - 12, 4, $this->realEstate->name, null, null, 'R');
        $this->SetXY(297 / 2 +10, 10);
        $this->SetFont('helvetica', null, 8);
        $this->MultiCell(297/2-12, 8, $this->realEstate->description, null, 'R', false, null, 297/2, null, true, null, true  );
    }

    public function Footer()
    {
        $this->Image(public_path('img/logo-h-20mm.png'), 0, 185, null, 10);
        $this->SetDrawColor(203, 153, 50);
        $this->Line(50, 190, 285, 190);

    }

    public function AcceptPageBreak()
    {
        if($this->pageBreakImage && $this->AutoPageBreak){

            $this->AddPage();
            $this->Image($this->pageBreakImage, 149, 30, 297 / 2);
            return false;
        }
        return parent::AcceptPageBreak();
    }

    public function Image($file, $x = '', $y = '', $w = 0, $h = 0, $type = '', $link = '', $align = '', $resize = false, $dpi = 300, $palign = '', $ismask = false, $imgmask = false, $border = 0, $fitbox = false, $hidden = false, $fitonpage = false, $alt = false, $altimgs = array())
    {
        if(!file_exists(public_path('tmp/'))){
            mkdir(public_path('tmp/', 666, true));
        }
        if(is_object($file)){
            $image = Storage::get($file->path);
            if($w && $h){
                Image::make($image)->fit($w * 3, $h * 3)->save(public_path('tmp/') . $file->name);
            }
            return parent::Image(public_path('tmp/') . $file->name, $x, $y, $w, $h, $type, $link, $align, $resize, $dpi, $palign, $ismask, $imgmask, $border, $fitbox, $hidden, $fitonpage, $alt, $altimgs); // TODO: Change the autogenerated stub
        }else{
            if($w && $h){
                Image::make($file)->fit($w * 3, $h * 3)->save(public_path('tmp/') . $file);
            }
            return parent::Image(public_path('tmp/') . $file, $x, $y, $w, $h, $type, $link, $align, $resize, $dpi, $palign, $ismask, $imgmask, $border, $fitbox, $hidden, $fitonpage, $alt, $altimgs); // TODO: Change the autogenerated stub
        }
    }


}